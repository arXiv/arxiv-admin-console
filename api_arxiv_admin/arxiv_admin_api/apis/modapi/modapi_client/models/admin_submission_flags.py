# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from arxiv_admin_api.apis.modapi.modapi_client.models.modapi_rest_admin_domain_flag_user import ModapiRestAdminDomainFlagUser
from typing import Optional, Set
from typing_extensions import Self

class AdminSubmissionFlags(BaseModel):
    """
    AdminSubmissionFlags
    """ # noqa: E501
    admins: Optional[List[ModapiRestAdminDomainFlagUser]] = None
    students: Optional[List[ModapiRestAdminDomainFlagUser]] = None
    primary_moderators: Optional[List[ModapiRestAdminDomainFlagUser]] = None
    other: Optional[List[ModapiRestAdminDomainFlagUser]] = None
    __properties: ClassVar[List[str]] = ["admins", "students", "primary_moderators", "other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminSubmissionFlags from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in admins (list)
        _items = []
        if self.admins:
            for _item_admins in self.admins:
                if _item_admins:
                    _items.append(_item_admins.to_dict())
            _dict['admins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in students (list)
        _items = []
        if self.students:
            for _item_students in self.students:
                if _item_students:
                    _items.append(_item_students.to_dict())
            _dict['students'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in primary_moderators (list)
        _items = []
        if self.primary_moderators:
            for _item_primary_moderators in self.primary_moderators:
                if _item_primary_moderators:
                    _items.append(_item_primary_moderators.to_dict())
            _dict['primary_moderators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other (list)
        _items = []
        if self.other:
            for _item_other in self.other:
                if _item_other:
                    _items.append(_item_other.to_dict())
            _dict['other'] = _items
        # set to None if admins (nullable) is None
        # and model_fields_set contains the field
        if self.admins is None and "admins" in self.model_fields_set:
            _dict['admins'] = None

        # set to None if students (nullable) is None
        # and model_fields_set contains the field
        if self.students is None and "students" in self.model_fields_set:
            _dict['students'] = None

        # set to None if primary_moderators (nullable) is None
        # and model_fields_set contains the field
        if self.primary_moderators is None and "primary_moderators" in self.model_fields_set:
            _dict['primary_moderators'] = None

        # set to None if other (nullable) is None
        # and model_fields_set contains the field
        if self.other is None and "other" in self.model_fields_set:
            _dict['other'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminSubmissionFlags from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admins": [ModapiRestAdminDomainFlagUser.from_dict(_item) for _item in obj["admins"]] if obj.get("admins") is not None else None,
            "students": [ModapiRestAdminDomainFlagUser.from_dict(_item) for _item in obj["students"]] if obj.get("students") is not None else None,
            "primary_moderators": [ModapiRestAdminDomainFlagUser.from_dict(_item) for _item in obj["primary_moderators"]] if obj.get("primary_moderators") is not None else None,
            "other": [ModapiRestAdminDomainFlagUser.from_dict(_item) for _item in obj["other"]] if obj.get("other") is not None else None
        })
        return _obj


