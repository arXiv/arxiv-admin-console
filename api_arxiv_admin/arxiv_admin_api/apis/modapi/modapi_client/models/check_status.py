# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CheckStatus(BaseModel):
    """
    A fastapi response_model for loading the latest check_result. 
    """ # noqa: E501
    check_result_id: StrictInt
    check_id: StrictInt
    submission_id: StrictInt
    data_version: Optional[StrictInt] = None
    metadata_version: Optional[StrictInt] = None
    ok: StrictBool
    message: Optional[StrictStr] = None
    paper_id: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["check_result_id", "check_id", "submission_id", "data_version", "metadata_version", "ok", "message", "paper_id", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_version (nullable) is None
        # and model_fields_set contains the field
        if self.data_version is None and "data_version" in self.model_fields_set:
            _dict['data_version'] = None

        # set to None if metadata_version (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_version is None and "metadata_version" in self.model_fields_set:
            _dict['metadata_version'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if paper_id (nullable) is None
        # and model_fields_set contains the field
        if self.paper_id is None and "paper_id" in self.model_fields_set:
            _dict['paper_id'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "check_result_id": obj.get("check_result_id"),
            "check_id": obj.get("check_id"),
            "submission_id": obj.get("submission_id"),
            "data_version": obj.get("data_version"),
            "metadata_version": obj.get("metadata_version"),
            "ok": obj.get("ok"),
            "message": obj.get("message"),
            "paper_id": obj.get("paper_id"),
            "version": obj.get("version")
        })
        return _obj


