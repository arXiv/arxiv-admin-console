# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from arxiv_admin_api.apis.modapi.modapi_client.models.get_hold_holds_submission_id_get200_response_inner_inner import GetHoldHoldsSubmissionIdGet200ResponseInnerInner
from arxiv_admin_api.apis.modapi.modapi_client.models.submission import Submission
from arxiv_admin_api.apis.modapi.modapi_client.models.submission_flags import SubmissionFlags
from typing import Optional, Set
from typing_extensions import Self

class SubmissionTodoWrapper(BaseModel):
    """
    SubmissionTodoWrapper
    """ # noqa: E501
    score: Optional[StrictInt] = None
    scores: Optional[List[List[GetHoldHoldsSubmissionIdGet200ResponseInnerInner]]] = None
    submission_id: Optional[StrictInt] = None
    submission: Optional[Submission] = None
    submission_flags: Optional[SubmissionFlags] = None
    __properties: ClassVar[List[str]] = ["score", "scores", "submission_id", "submission", "submission_flags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionTodoWrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scores (list of list)
        _items = []
        if self.scores:
            for _item_scores in self.scores:
                if _item_scores:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_scores if _inner_item is not None]
                    )
            _dict['scores'] = _items
        # override the default output from pydantic by calling `to_dict()` of submission
        if self.submission:
            _dict['submission'] = self.submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submission_flags
        if self.submission_flags:
            _dict['submission_flags'] = self.submission_flags.to_dict()
        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict['score'] = None

        # set to None if scores (nullable) is None
        # and model_fields_set contains the field
        if self.scores is None and "scores" in self.model_fields_set:
            _dict['scores'] = None

        # set to None if submission_id (nullable) is None
        # and model_fields_set contains the field
        if self.submission_id is None and "submission_id" in self.model_fields_set:
            _dict['submission_id'] = None

        # set to None if submission (nullable) is None
        # and model_fields_set contains the field
        if self.submission is None and "submission" in self.model_fields_set:
            _dict['submission'] = None

        # set to None if submission_flags (nullable) is None
        # and model_fields_set contains the field
        if self.submission_flags is None and "submission_flags" in self.model_fields_set:
            _dict['submission_flags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionTodoWrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "score": obj.get("score"),
            "scores": [
                    [GetHoldHoldsSubmissionIdGet200ResponseInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["scores"]
                ] if obj.get("scores") is not None else None,
            "submission_id": obj.get("submission_id"),
            "submission": Submission.from_dict(obj["submission"]) if obj.get("submission") is not None else None,
            "submission_flags": SubmissionFlags.from_dict(obj["submission_flags"]) if obj.get("submission_flags") is not None else None
        })
        return _obj


