# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubmissionUrls(BaseModel):
    """
    SubmissionUrls
    """ # noqa: E501
    abs: Optional[StrictStr] = None
    addfiles: Optional[StrictStr] = None
    allow_tex_produced: Optional[StrictStr] = None
    eprint: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    html: Optional[StrictStr] = None
    html_announced: Optional[StrictStr] = None
    html_submitted: Optional[StrictStr] = None
    html_submitted_future: Optional[StrictStr] = None
    log: Optional[StrictStr] = None
    paper_detail: Optional[StrictStr] = None
    pdf: Optional[StrictStr] = None
    pdf_announced: Optional[StrictStr] = None
    pdf_submitted: Optional[StrictStr] = None
    remove: Optional[StrictStr] = None
    reprocess: Optional[StrictStr] = None
    resubmit: Optional[StrictStr] = None
    src: Optional[StrictStr] = None
    submitter_detail: Optional[StrictStr] = None
    unremove: Optional[StrictStr] = None
    unsubmit: Optional[StrictStr] = None
    view: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["abs", "addfiles", "allow_tex_produced", "eprint", "format", "html", "html_announced", "html_submitted", "html_submitted_future", "log", "paper_detail", "pdf", "pdf_announced", "pdf_submitted", "remove", "reprocess", "resubmit", "src", "submitter_detail", "unremove", "unsubmit", "view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionUrls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if abs (nullable) is None
        # and model_fields_set contains the field
        if self.abs is None and "abs" in self.model_fields_set:
            _dict['abs'] = None

        # set to None if addfiles (nullable) is None
        # and model_fields_set contains the field
        if self.addfiles is None and "addfiles" in self.model_fields_set:
            _dict['addfiles'] = None

        # set to None if allow_tex_produced (nullable) is None
        # and model_fields_set contains the field
        if self.allow_tex_produced is None and "allow_tex_produced" in self.model_fields_set:
            _dict['allow_tex_produced'] = None

        # set to None if eprint (nullable) is None
        # and model_fields_set contains the field
        if self.eprint is None and "eprint" in self.model_fields_set:
            _dict['eprint'] = None

        # set to None if format (nullable) is None
        # and model_fields_set contains the field
        if self.format is None and "format" in self.model_fields_set:
            _dict['format'] = None

        # set to None if html (nullable) is None
        # and model_fields_set contains the field
        if self.html is None and "html" in self.model_fields_set:
            _dict['html'] = None

        # set to None if html_announced (nullable) is None
        # and model_fields_set contains the field
        if self.html_announced is None and "html_announced" in self.model_fields_set:
            _dict['html_announced'] = None

        # set to None if html_submitted (nullable) is None
        # and model_fields_set contains the field
        if self.html_submitted is None and "html_submitted" in self.model_fields_set:
            _dict['html_submitted'] = None

        # set to None if html_submitted_future (nullable) is None
        # and model_fields_set contains the field
        if self.html_submitted_future is None and "html_submitted_future" in self.model_fields_set:
            _dict['html_submitted_future'] = None

        # set to None if log (nullable) is None
        # and model_fields_set contains the field
        if self.log is None and "log" in self.model_fields_set:
            _dict['log'] = None

        # set to None if paper_detail (nullable) is None
        # and model_fields_set contains the field
        if self.paper_detail is None and "paper_detail" in self.model_fields_set:
            _dict['paper_detail'] = None

        # set to None if pdf (nullable) is None
        # and model_fields_set contains the field
        if self.pdf is None and "pdf" in self.model_fields_set:
            _dict['pdf'] = None

        # set to None if pdf_announced (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_announced is None and "pdf_announced" in self.model_fields_set:
            _dict['pdf_announced'] = None

        # set to None if pdf_submitted (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_submitted is None and "pdf_submitted" in self.model_fields_set:
            _dict['pdf_submitted'] = None

        # set to None if remove (nullable) is None
        # and model_fields_set contains the field
        if self.remove is None and "remove" in self.model_fields_set:
            _dict['remove'] = None

        # set to None if reprocess (nullable) is None
        # and model_fields_set contains the field
        if self.reprocess is None and "reprocess" in self.model_fields_set:
            _dict['reprocess'] = None

        # set to None if resubmit (nullable) is None
        # and model_fields_set contains the field
        if self.resubmit is None and "resubmit" in self.model_fields_set:
            _dict['resubmit'] = None

        # set to None if src (nullable) is None
        # and model_fields_set contains the field
        if self.src is None and "src" in self.model_fields_set:
            _dict['src'] = None

        # set to None if submitter_detail (nullable) is None
        # and model_fields_set contains the field
        if self.submitter_detail is None and "submitter_detail" in self.model_fields_set:
            _dict['submitter_detail'] = None

        # set to None if unremove (nullable) is None
        # and model_fields_set contains the field
        if self.unremove is None and "unremove" in self.model_fields_set:
            _dict['unremove'] = None

        # set to None if unsubmit (nullable) is None
        # and model_fields_set contains the field
        if self.unsubmit is None and "unsubmit" in self.model_fields_set:
            _dict['unsubmit'] = None

        # set to None if view (nullable) is None
        # and model_fields_set contains the field
        if self.view is None and "view" in self.model_fields_set:
            _dict['view'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionUrls from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abs": obj.get("abs"),
            "addfiles": obj.get("addfiles"),
            "allow_tex_produced": obj.get("allow_tex_produced"),
            "eprint": obj.get("eprint"),
            "format": obj.get("format"),
            "html": obj.get("html"),
            "html_announced": obj.get("html_announced"),
            "html_submitted": obj.get("html_submitted"),
            "html_submitted_future": obj.get("html_submitted_future"),
            "log": obj.get("log"),
            "paper_detail": obj.get("paper_detail"),
            "pdf": obj.get("pdf"),
            "pdf_announced": obj.get("pdf_announced"),
            "pdf_submitted": obj.get("pdf_submitted"),
            "remove": obj.get("remove"),
            "reprocess": obj.get("reprocess"),
            "resubmit": obj.get("resubmit"),
            "src": obj.get("src"),
            "submitter_detail": obj.get("submitter_detail"),
            "unremove": obj.get("unremove"),
            "unsubmit": obj.get("unsubmit"),
            "view": obj.get("view")
        })
        return _obj


