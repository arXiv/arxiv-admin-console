# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from arxiv_admin_api.apis.modapi.modapi_client.models.admin_search_result_demographics import AdminSearchResultDemographics
from typing import Optional, Set
from typing_extensions import Self

class AdminSearchResultUser(BaseModel):
    """
    AdminSearchResultUser
    """ # noqa: E501
    email: Optional[StrictStr] = None
    email_bouncing: Optional[StrictBool] = None
    first_name: Optional[StrictStr] = None
    flag_allow_tex_produced: Optional[StrictBool] = None
    flag_banned: Optional[StrictBool] = None
    flag_can_lock: Optional[StrictBool] = None
    flag_edit_system: Optional[StrictBool] = None
    flag_edit_users: Optional[StrictBool] = None
    flag_email_verified: Optional[StrictBool] = None
    joined_date: Optional[datetime] = None
    joined_ip_num: Optional[StrictStr] = None
    initials: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    username: Optional[StrictStr] = None
    demographics: Optional[AdminSearchResultDemographics] = None
    number_of_active: Optional[StrictInt] = None
    number_of_accepted: Optional[StrictInt] = None
    number_of_rejected: Optional[StrictInt] = None
    submitter_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["email", "email_bouncing", "first_name", "flag_allow_tex_produced", "flag_banned", "flag_can_lock", "flag_edit_system", "flag_edit_users", "flag_email_verified", "joined_date", "joined_ip_num", "initials", "last_name", "name", "user_id", "username", "demographics", "number_of_active", "number_of_accepted", "number_of_rejected", "submitter_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminSearchResultUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of demographics
        if self.demographics:
            _dict['demographics'] = self.demographics.to_dict()
        # set to None if joined_ip_num (nullable) is None
        # and model_fields_set contains the field
        if self.joined_ip_num is None and "joined_ip_num" in self.model_fields_set:
            _dict['joined_ip_num'] = None

        # set to None if demographics (nullable) is None
        # and model_fields_set contains the field
        if self.demographics is None and "demographics" in self.model_fields_set:
            _dict['demographics'] = None

        # set to None if submitter_url (nullable) is None
        # and model_fields_set contains the field
        if self.submitter_url is None and "submitter_url" in self.model_fields_set:
            _dict['submitter_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminSearchResultUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "email_bouncing": obj.get("email_bouncing"),
            "first_name": obj.get("first_name"),
            "flag_allow_tex_produced": obj.get("flag_allow_tex_produced"),
            "flag_banned": obj.get("flag_banned"),
            "flag_can_lock": obj.get("flag_can_lock"),
            "flag_edit_system": obj.get("flag_edit_system"),
            "flag_edit_users": obj.get("flag_edit_users"),
            "flag_email_verified": obj.get("flag_email_verified"),
            "joined_date": obj.get("joined_date"),
            "joined_ip_num": obj.get("joined_ip_num"),
            "initials": obj.get("initials"),
            "last_name": obj.get("last_name"),
            "name": obj.get("name"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username"),
            "demographics": AdminSearchResultDemographics.from_dict(obj["demographics"]) if obj.get("demographics") is not None else None,
            "number_of_active": obj.get("number_of_active"),
            "number_of_accepted": obj.get("number_of_accepted"),
            "number_of_rejected": obj.get("number_of_rejected"),
            "submitter_url": obj.get("submitter_url")
        })
        return _obj


