# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModapiRestAdminDomainFlagUser(BaseModel):
    """
    ModapiRestAdminDomainFlagUser
    """ # noqa: E501
    categories: Optional[List[StrictStr]] = None
    email: Optional[StrictStr] = None
    flag: Optional[StrictStr] = None
    flag_name: Optional[StrictStr] = None
    flag_done: Optional[StrictBool] = None
    flag_done_cleared: Optional[StrictBool] = None
    flag_pdf_opened: Optional[StrictBool] = None
    flag_viewed: Optional[StrictBool] = None
    initials: Optional[StrictStr] = None
    is_admin: Optional[StrictBool] = None
    is_moderator: Optional[StrictBool] = None
    is_student: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["categories", "email", "flag", "flag_name", "flag_done", "flag_done_cleared", "flag_pdf_opened", "flag_viewed", "initials", "is_admin", "is_moderator", "is_student", "name", "user_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModapiRestAdminDomainFlagUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if flag (nullable) is None
        # and model_fields_set contains the field
        if self.flag is None and "flag" in self.model_fields_set:
            _dict['flag'] = None

        # set to None if flag_name (nullable) is None
        # and model_fields_set contains the field
        if self.flag_name is None and "flag_name" in self.model_fields_set:
            _dict['flag_name'] = None

        # set to None if flag_done (nullable) is None
        # and model_fields_set contains the field
        if self.flag_done is None and "flag_done" in self.model_fields_set:
            _dict['flag_done'] = None

        # set to None if flag_done_cleared (nullable) is None
        # and model_fields_set contains the field
        if self.flag_done_cleared is None and "flag_done_cleared" in self.model_fields_set:
            _dict['flag_done_cleared'] = None

        # set to None if flag_pdf_opened (nullable) is None
        # and model_fields_set contains the field
        if self.flag_pdf_opened is None and "flag_pdf_opened" in self.model_fields_set:
            _dict['flag_pdf_opened'] = None

        # set to None if flag_viewed (nullable) is None
        # and model_fields_set contains the field
        if self.flag_viewed is None and "flag_viewed" in self.model_fields_set:
            _dict['flag_viewed'] = None

        # set to None if initials (nullable) is None
        # and model_fields_set contains the field
        if self.initials is None and "initials" in self.model_fields_set:
            _dict['initials'] = None

        # set to None if is_admin (nullable) is None
        # and model_fields_set contains the field
        if self.is_admin is None and "is_admin" in self.model_fields_set:
            _dict['is_admin'] = None

        # set to None if is_moderator (nullable) is None
        # and model_fields_set contains the field
        if self.is_moderator is None and "is_moderator" in self.model_fields_set:
            _dict['is_moderator'] = None

        # set to None if is_student (nullable) is None
        # and model_fields_set contains the field
        if self.is_student is None and "is_student" in self.model_fields_set:
            _dict['is_student'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModapiRestAdminDomainFlagUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": obj.get("categories"),
            "email": obj.get("email"),
            "flag": obj.get("flag"),
            "flag_name": obj.get("flag_name"),
            "flag_done": obj.get("flag_done"),
            "flag_done_cleared": obj.get("flag_done_cleared"),
            "flag_pdf_opened": obj.get("flag_pdf_opened"),
            "flag_viewed": obj.get("flag_viewed"),
            "initials": obj.get("initials"),
            "is_admin": obj.get("is_admin"),
            "is_moderator": obj.get("is_moderator"),
            "is_student": obj.get("is_student"),
            "name": obj.get("name"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username")
        })
        return _obj


