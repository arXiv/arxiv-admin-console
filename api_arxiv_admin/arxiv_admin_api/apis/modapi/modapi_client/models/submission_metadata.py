# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubmissionMetadata(BaseModel):
    """
    Basic metadata for a submission that can be edited
    """ # noqa: E501
    title: Optional[StrictStr] = None
    authors: Optional[StrictStr] = None
    comments: Optional[StrictStr] = None
    abstract: Optional[StrictStr] = None
    proxy: Optional[StrictStr] = None
    report_num: Optional[StrictStr] = None
    msc_class: Optional[StrictStr] = None
    acm_class: Optional[StrictStr] = None
    journal_ref: Optional[StrictStr] = None
    doi: Optional[StrictStr] = None
    primary: Optional[StrictStr] = None
    secondary: Optional[List[StrictStr]] = None
    edit_token: StrictStr
    __properties: ClassVar[List[str]] = ["title", "authors", "comments", "abstract", "proxy", "report_num", "msc_class", "acm_class", "journal_ref", "doi", "primary", "secondary", "edit_token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if authors (nullable) is None
        # and model_fields_set contains the field
        if self.authors is None and "authors" in self.model_fields_set:
            _dict['authors'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if abstract (nullable) is None
        # and model_fields_set contains the field
        if self.abstract is None and "abstract" in self.model_fields_set:
            _dict['abstract'] = None

        # set to None if proxy (nullable) is None
        # and model_fields_set contains the field
        if self.proxy is None and "proxy" in self.model_fields_set:
            _dict['proxy'] = None

        # set to None if report_num (nullable) is None
        # and model_fields_set contains the field
        if self.report_num is None and "report_num" in self.model_fields_set:
            _dict['report_num'] = None

        # set to None if msc_class (nullable) is None
        # and model_fields_set contains the field
        if self.msc_class is None and "msc_class" in self.model_fields_set:
            _dict['msc_class'] = None

        # set to None if acm_class (nullable) is None
        # and model_fields_set contains the field
        if self.acm_class is None and "acm_class" in self.model_fields_set:
            _dict['acm_class'] = None

        # set to None if journal_ref (nullable) is None
        # and model_fields_set contains the field
        if self.journal_ref is None and "journal_ref" in self.model_fields_set:
            _dict['journal_ref'] = None

        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['doi'] = None

        # set to None if primary (nullable) is None
        # and model_fields_set contains the field
        if self.primary is None and "primary" in self.model_fields_set:
            _dict['primary'] = None

        # set to None if secondary (nullable) is None
        # and model_fields_set contains the field
        if self.secondary is None and "secondary" in self.model_fields_set:
            _dict['secondary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "authors": obj.get("authors"),
            "comments": obj.get("comments"),
            "abstract": obj.get("abstract"),
            "proxy": obj.get("proxy"),
            "report_num": obj.get("report_num"),
            "msc_class": obj.get("msc_class"),
            "acm_class": obj.get("acm_class"),
            "journal_ref": obj.get("journal_ref"),
            "doi": obj.get("doi"),
            "primary": obj.get("primary"),
            "secondary": obj.get("secondary"),
            "edit_token": obj.get("edit_token")
        })
        return _obj


