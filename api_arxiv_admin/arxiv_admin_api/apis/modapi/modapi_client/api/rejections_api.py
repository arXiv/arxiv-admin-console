# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr
from typing import Any, Optional
from arxiv_admin_api.apis.modapi.modapi_client.models.category_rejection import CategoryRejection

from arxiv_admin_api.apis.modapi.modapi_client.api_client import ApiClient, RequestSerialized
from arxiv_admin_api.apis.modapi.modapi_client.api_response import ApiResponse
from arxiv_admin_api.apis.modapi.modapi_client.rest import RESTResponseType


class RejectionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rejection_submission_submission_id_category_rejection_post(
        self,
        submission_id: StrictInt,
        category_rejection: CategoryRejection,
        enable_submission_locks: Optional[StrictBool] = None,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Category Rejection

        Reject a single category from a submission.  If the submission is of type `new` or `rep`: - If the category being rejected is a primary, remove the category from the submission, put the submission on hold, and log the action to the admin log. - If the category is a secondary, remove it from the submission and log the action. - If the category is a primary as the action is \"accept_secondary\", update the category to become a secondary and log the action.  If submission is of type `cross`: - If the category being rejected is the only category in the set of new \"cross\" categories, set the submission status to REMOVED (9), log the action to the admin log and notify the submitter via email. - If the category is one of multiple categories in the set of new \"cross\" categories, remove the category from the submission and log the action to the admin log.  Returns \"success\" if the category_rejection completed successfully.

        :param submission_id: (required)
        :type submission_id: int
        :param category_rejection: (required)
        :type category_rejection: CategoryRejection
        :param enable_submission_locks:
        :type enable_submission_locks: bool
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rejection_submission_submission_id_category_rejection_post_serialize(
            submission_id=submission_id,
            category_rejection=category_rejection,
            enable_submission_locks=enable_submission_locks,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rejection_submission_submission_id_category_rejection_post_with_http_info(
        self,
        submission_id: StrictInt,
        category_rejection: CategoryRejection,
        enable_submission_locks: Optional[StrictBool] = None,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Category Rejection

        Reject a single category from a submission.  If the submission is of type `new` or `rep`: - If the category being rejected is a primary, remove the category from the submission, put the submission on hold, and log the action to the admin log. - If the category is a secondary, remove it from the submission and log the action. - If the category is a primary as the action is \"accept_secondary\", update the category to become a secondary and log the action.  If submission is of type `cross`: - If the category being rejected is the only category in the set of new \"cross\" categories, set the submission status to REMOVED (9), log the action to the admin log and notify the submitter via email. - If the category is one of multiple categories in the set of new \"cross\" categories, remove the category from the submission and log the action to the admin log.  Returns \"success\" if the category_rejection completed successfully.

        :param submission_id: (required)
        :type submission_id: int
        :param category_rejection: (required)
        :type category_rejection: CategoryRejection
        :param enable_submission_locks:
        :type enable_submission_locks: bool
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rejection_submission_submission_id_category_rejection_post_serialize(
            submission_id=submission_id,
            category_rejection=category_rejection,
            enable_submission_locks=enable_submission_locks,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rejection_submission_submission_id_category_rejection_post_without_preload_content(
        self,
        submission_id: StrictInt,
        category_rejection: CategoryRejection,
        enable_submission_locks: Optional[StrictBool] = None,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Category Rejection

        Reject a single category from a submission.  If the submission is of type `new` or `rep`: - If the category being rejected is a primary, remove the category from the submission, put the submission on hold, and log the action to the admin log. - If the category is a secondary, remove it from the submission and log the action. - If the category is a primary as the action is \"accept_secondary\", update the category to become a secondary and log the action.  If submission is of type `cross`: - If the category being rejected is the only category in the set of new \"cross\" categories, set the submission status to REMOVED (9), log the action to the admin log and notify the submitter via email. - If the category is one of multiple categories in the set of new \"cross\" categories, remove the category from the submission and log the action to the admin log.  Returns \"success\" if the category_rejection completed successfully.

        :param submission_id: (required)
        :type submission_id: int
        :param category_rejection: (required)
        :type category_rejection: CategoryRejection
        :param enable_submission_locks:
        :type enable_submission_locks: bool
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rejection_submission_submission_id_category_rejection_post_serialize(
            submission_id=submission_id,
            category_rejection=category_rejection,
            enable_submission_locks=enable_submission_locks,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rejection_submission_submission_id_category_rejection_post_serialize(
        self,
        submission_id,
        category_rejection,
        enable_submission_locks,
        authorization,
        modkey,
        arxivng_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if submission_id is not None:
            _path_params['submission_id'] = submission_id
        # process the query parameters
        if enable_submission_locks is not None:
            
            _query_params.append(('enable_submission_locks', enable_submission_locks))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if modkey is not None:
            _header_params['modkey'] = modkey
        # process the form parameters
        # process the body parameter
        if category_rejection is not None:
            _body_params = category_rejection


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/submission/{submission_id}/category_rejection',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


