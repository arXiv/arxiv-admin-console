# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictInt, StrictStr
from typing import Any, Optional
from arxiv_admin_api.apis.modapi.modapi_client.models.check_response_form import CheckResponseForm
from arxiv_admin_api.apis.modapi.modapi_client.models.check_result_form import CheckResultForm
from arxiv_admin_api.apis.modapi.modapi_client.models.check_status import CheckStatus
from arxiv_admin_api.apis.modapi.modapi_client.models.check_status_form import CheckStatusForm
from arxiv_admin_api.apis.modapi.modapi_client.models.submission_check_summary import SubmissionCheckSummary

from arxiv_admin_api.apis.modapi.modapi_client.api_client import ApiClient, RequestSerialized
from arxiv_admin_api.apis.modapi.modapi_client.api_response import ApiResponse
from arxiv_admin_api.apis.modapi.modapi_client.rest import RESTResponseType


class ChecksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def submission_check_result_submissions_submission_id_checks_check_id_result_post(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_form: CheckResultForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Post Submission Check Result

        Store the result of a qa check. The check can be configured to require/skip meta/data-versioning.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_form: (required)
        :type check_result_form: CheckResultForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_result_submissions_submission_id_checks_check_id_result_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_form=check_result_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submission_check_result_submissions_submission_id_checks_check_id_result_post_with_http_info(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_form: CheckResultForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Post Submission Check Result

        Store the result of a qa check. The check can be configured to require/skip meta/data-versioning.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_form: (required)
        :type check_result_form: CheckResultForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_result_submissions_submission_id_checks_check_id_result_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_form=check_result_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submission_check_result_submissions_submission_id_checks_check_id_result_post_without_preload_content(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_form: CheckResultForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post Submission Check Result

        Store the result of a qa check. The check can be configured to require/skip meta/data-versioning.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_form: (required)
        :type check_result_form: CheckResultForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_result_submissions_submission_id_checks_check_id_result_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_form=check_result_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submission_check_result_submissions_submission_id_checks_check_id_result_post_serialize(
        self,
        submission_id,
        check_id,
        check_result_form,
        authorization,
        modkey,
        arxivng_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if submission_id is not None:
            _path_params['submission_id'] = submission_id
        if check_id is not None:
            _path_params['check_id'] = check_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if modkey is not None:
            _header_params['modkey'] = modkey
        # process the form parameters
        # process the body parameter
        if check_result_form is not None:
            _body_params = check_result_form


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/submissions/{submission_id}/checks/{check_id}/result',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_id: StrictInt,
        check_response_form: CheckResponseForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Post Submission Check Results Response


        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_id: (required)
        :type check_result_id: int
        :param check_response_form: (required)
        :type check_response_form: CheckResponseForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_id=check_result_id,
            check_response_form=check_response_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_with_http_info(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_id: StrictInt,
        check_response_form: CheckResponseForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Post Submission Check Results Response


        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_id: (required)
        :type check_result_id: int
        :param check_response_form: (required)
        :type check_response_form: CheckResponseForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_id=check_result_id,
            check_response_form=check_response_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_without_preload_content(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        check_result_id: StrictInt,
        check_response_form: CheckResponseForm,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post Submission Check Results Response


        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param check_result_id: (required)
        :type check_result_id: int
        :param check_response_form: (required)
        :type check_response_form: CheckResponseForm
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_serialize(
            submission_id=submission_id,
            check_id=check_id,
            check_result_id=check_result_id,
            check_response_form=check_response_form,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submission_check_results_response_submissions_submission_id_checks_check_id_results_check_result_id_response_post_serialize(
        self,
        submission_id,
        check_id,
        check_result_id,
        check_response_form,
        authorization,
        modkey,
        arxivng_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if submission_id is not None:
            _path_params['submission_id'] = submission_id
        if check_id is not None:
            _path_params['check_id'] = check_id
        if check_result_id is not None:
            _path_params['check_result_id'] = check_result_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if modkey is not None:
            _header_params['modkey'] = modkey
        # process the form parameters
        # process the body parameter
        if check_response_form is not None:
            _body_params = check_response_form


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/submissions/{submission_id}/checks/{check_id}/results/{check_result_id}/response',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submission_check_status_submissions_submission_id_checks_check_id_status_get(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        check_status_form: Optional[CheckStatusForm] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CheckStatus:
        """Get Submission Check Status

        Given a submission and check_id, return the check results,  and whether it's up to date. Intended to be useful for qa-checks.   Does not show responses to the results. Could be used to lookup the status of other dependent checks. Has the data been changed, so I don't need to run? Did my check already run on another thread? Show the latest result, if duplicate results allowed. Check the meta/data-versions, if required in checks table.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param check_status_form:
        :type check_status_form: CheckStatusForm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_status_submissions_submission_id_checks_check_id_status_get_serialize(
            submission_id=submission_id,
            check_id=check_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            check_status_form=check_status_form,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submission_check_status_submissions_submission_id_checks_check_id_status_get_with_http_info(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        check_status_form: Optional[CheckStatusForm] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CheckStatus]:
        """Get Submission Check Status

        Given a submission and check_id, return the check results,  and whether it's up to date. Intended to be useful for qa-checks.   Does not show responses to the results. Could be used to lookup the status of other dependent checks. Has the data been changed, so I don't need to run? Did my check already run on another thread? Show the latest result, if duplicate results allowed. Check the meta/data-versions, if required in checks table.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param check_status_form:
        :type check_status_form: CheckStatusForm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_status_submissions_submission_id_checks_check_id_status_get_serialize(
            submission_id=submission_id,
            check_id=check_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            check_status_form=check_status_form,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submission_check_status_submissions_submission_id_checks_check_id_status_get_without_preload_content(
        self,
        submission_id: StrictInt,
        check_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        check_status_form: Optional[CheckStatusForm] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Submission Check Status

        Given a submission and check_id, return the check results,  and whether it's up to date. Intended to be useful for qa-checks.   Does not show responses to the results. Could be used to lookup the status of other dependent checks. Has the data been changed, so I don't need to run? Did my check already run on another thread? Show the latest result, if duplicate results allowed. Check the meta/data-versions, if required in checks table.

        :param submission_id: (required)
        :type submission_id: int
        :param check_id: (required)
        :type check_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param check_status_form:
        :type check_status_form: CheckStatusForm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_status_submissions_submission_id_checks_check_id_status_get_serialize(
            submission_id=submission_id,
            check_id=check_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            check_status_form=check_status_form,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submission_check_status_submissions_submission_id_checks_check_id_status_get_serialize(
        self,
        submission_id,
        check_id,
        authorization,
        modkey,
        arxivng_session_id,
        check_status_form,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if submission_id is not None:
            _path_params['submission_id'] = submission_id
        if check_id is not None:
            _path_params['check_id'] = check_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if modkey is not None:
            _header_params['modkey'] = modkey
        # process the form parameters
        # process the body parameter
        if check_status_form is not None:
            _body_params = check_status_form


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/submissions/{submission_id}/checks/{check_id}/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submission_check_summary_submissions_submission_id_check_summary_get(
        self,
        submission_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubmissionCheckSummary:
        """Get Submission Check Summary

        Given a submission, return information about the qa check results. Intended to be useful in the arxiv-check ui. Will show things like out of date responses to check-results. Will show responses to result_ids, which can be duplicate sub,check pairs

        :param submission_id: (required)
        :type submission_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_summary_submissions_submission_id_check_summary_get_serialize(
            submission_id=submission_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmissionCheckSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submission_check_summary_submissions_submission_id_check_summary_get_with_http_info(
        self,
        submission_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubmissionCheckSummary]:
        """Get Submission Check Summary

        Given a submission, return information about the qa check results. Intended to be useful in the arxiv-check ui. Will show things like out of date responses to check-results. Will show responses to result_ids, which can be duplicate sub,check pairs

        :param submission_id: (required)
        :type submission_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_summary_submissions_submission_id_check_summary_get_serialize(
            submission_id=submission_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmissionCheckSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submission_check_summary_submissions_submission_id_check_summary_get_without_preload_content(
        self,
        submission_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        modkey: Optional[StrictStr] = None,
        arxivng_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Submission Check Summary

        Given a submission, return information about the qa check results. Intended to be useful in the arxiv-check ui. Will show things like out of date responses to check-results. Will show responses to result_ids, which can be duplicate sub,check pairs

        :param submission_id: (required)
        :type submission_id: int
        :param authorization:
        :type authorization: str
        :param modkey:
        :type modkey: str
        :param arxivng_session_id:
        :type arxivng_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submission_check_summary_submissions_submission_id_check_summary_get_serialize(
            submission_id=submission_id,
            authorization=authorization,
            modkey=modkey,
            arxivng_session_id=arxivng_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmissionCheckSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submission_check_summary_submissions_submission_id_check_summary_get_serialize(
        self,
        submission_id,
        authorization,
        modkey,
        arxivng_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if submission_id is not None:
            _path_params['submission_id'] = submission_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if modkey is not None:
            _header_params['modkey'] = modkey
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/submissions/{submission_id}/check-summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


