/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/submissions/{submission_id}/admin-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Submissions Admin Log */
        post: operations["post_submissions_admin_log_submissions__submission_id__admin_log_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/admin-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submissions Admin Logs */
        get: operations["get_submissions_admin_logs_submissions__submission_id__admin_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/checks/{check_id}/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Submission Check Result
         * @description Store the result of a qa check.
         *     The check can be configured to require/skip meta/data-versioning.
         */
        post: operations["post_submission_check_result_submissions__submission_id__checks__check_id__result_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/checks/{check_id}/results/{check_result_id}/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Submission Check Results Response */
        post: operations["post_submission_check_results_response_submissions__submission_id__checks__check_id__results__check_result_id__response_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/checks/{check_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission Check Status
         * @description Given a submission and check_id, return the check results,
         *     and whether it's up to date.
         *     Intended to be useful for qa-checks.
         *       Does not show responses to the results.
         *     Could be used to lookup the status of other dependent checks.
         *     Has the data been changed, so I don't need to run?
         *     Did my check already run on another thread?
         *     Show the latest result, if duplicate results allowed.
         *     Check the meta/data-versions, if required in checks table.
         */
        get: operations["get_submission_check_status_submissions__submission_id__checks__check_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/check-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission Check Summary
         * @description Given a submission, return information about the qa check results.
         *     Intended to be useful in the arxiv-check ui.
         *     Will show things like out of date responses to check-results.
         *     Will show responses to result_ids, which can be duplicate sub,check pairs
         */
        get: operations["get_submission_check_summary_submissions__submission_id__check_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/flag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flag
         * @description Get the flags for a single submission.
         *
         *     Returns an empty list if there are no flags on the submission or
         *     the submission does not exist.
         *
         *     This will return the flags regardless of the state of the
         *     submission.  It will return flags to moderators for papers
         *     outside their queue to support single submission view in the case
         *     the categories on the submision changed.
         */
        get: operations["get_flag_submission__submission_id__flag_get"];
        /** Put Flag */
        put: operations["put_flag_submission__submission_id__flag_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submission_id}/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submissions Flags */
        get: operations["get_submissions_flags_submissions__submission_id__flags_get"];
        put?: never;
        /** Post Submissions Flags */
        post: operations["post_submissions_flags_submissions__submission_id__flags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/flag/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Del Flag */
        post: operations["del_flag_submission__submission_id__flag_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Flags
         * @description Gets list of submissions with flags.
         *
         *     This is filtered to just flags on submissions a that mod or admin would
         *     have in thier queue.
         */
        get: operations["flags_flags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission
         * @description Gets a single submission.
         */
        get: operations["get_submission_submission__submission_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submissions */
        get: operations["get_submissions_submissions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/todo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submissions Todo */
        get: operations["get_submissions_todo_submissions_todo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/submitter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Submitter
         * @description Gets the submitter data for the account that created the submission. This could be a proxy
         */
        get: operations["submitter_submission__submission_id__submitter_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/my-moderator-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Debug My Moderator Categories */
        get: operations["get_debug_my_moderator_categories_debug_my_moderator_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Submission Pdf
         * @description redirects to a link to download the submission pdf from gcp if available
         */
        get: operations["get_submission_pdf_submission__submission_id__pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission-locks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks */
        get: operations["get_submission_locks_submission_locks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission-locks/{submission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks Lookup */
        get: operations["get_submission_locks_lookup_submission_locks__submission_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission-locks/{submission_id}/lookup/{lock_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks Lookup */
        get: operations["get_submission_locks_lookup_submission_locks__submission_id__lookup__lock_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission-locks/{submission_id}/lock/{lock_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks Lock */
        get: operations["get_submission_locks_lock_submission_locks__submission_id__lock__lock_type__get"];
        put?: never;
        /** Post Submission Locks Lock */
        post: operations["post_submission_locks_lock_submission_locks__submission_id__lock__lock_type__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission-locks/{submission_id}/release/{lock_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks Lock */
        get: operations["get_submission_locks_lock_submission_locks__submission_id__release__lock_type__get"];
        put?: never;
        /** Post Submission Locks Release */
        post: operations["post_submission_locks_release_submission_locks__submission_id__release__lock_type__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/is_locked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Is Locked
         * @description Checks if the submission is locked for editing.
         *
         *     Note, this is just advisory locking for editing in the arxiv-check
         *     UI. This is not the admin lock that blocks all changes to the
         *     submission.
         *
         *     Note, This does not return a 404 if the submission does not exist.
         */
        get: operations["is_locked_submission__submission_id__is_locked_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Status
         * @description Get the status of the ModAPI service as HTTP status code.
         *
         *     Tests connection to DB.
         */
        get: operations["status_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Version
         * @description Returns git version
         */
        get: operations["version_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email_log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Email Log
         * @description Gets the email debug log.
         */
        get: operations["email_log_email_log_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/hold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hold
         * @description Put a submission on hold
         *     This will prevent it from being announced until it is released from hold.
         *     The sendback feature is not yet implemented.
         */
        post: operations["hold_submission__submission_id__hold_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/hold/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hold Release
         * @description Releases a hold.
         *
         *     To release a hold means to set the submission status so that it is
         *     available to be published.
         *
         *     If Moderator the submission must be:
         *     - on hold
         *     - have a row in arXiv_submission_hold_reason
         *
         *     Moderators can release any hold that has a reason in the
         *     arXiv_submission_hold_reason table.
         *
         *     If Admin the submission must be:
         *     - on hold
         *
         *     Admins can release holds referenced in the
         *     arXiv_submission_hold_reason or legacy style holds.
         */
        post: operations["hold_release_submission__submission_id__hold_release_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/holds/{submission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hold
         * @description Gets the hold for a single submission.
         */
        get: operations["get_hold_holds__submission_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/holds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Holds
         * @description Gets all existing holds.
         *
         *     If the user is a moderator this only gets the holds on submissions
         *     of interest to the moderator.
         *
         *     Returns List of [ subid, user_id, type, reason ]
         *
         *     user_id, and reason may be an empty string.
         *
         *     Type will be 'admin', 'mod' or 'legacy'.
         */
        get: operations["holds_holds_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Me
         * @description Gets information about the currently logged in user
         */
        get: operations["me_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Times
         * @description Gets times related operation of the submission system.
         *
         *     arxiv_tz: The timezone of the arXiv business offices. This is not
         *     the timezone of the times in the response. Those should be in UTC.
         *
         *     next_mail: The date and time of the next announcement mailing.
         *
         *     next_freeze: The date and time of the next submission
         *     deadline. This may be earlier than next_mail, meaning that the
         *     current time is before the deadline to get in the next_mail
         *     announcement. Or it may be after next_mail, meaning that the
         *     current time is later than the deadline to get in the next_mail
         *     announcement.
         *
         *     subsequent_mail: The date and time of the announcement mailing
         *     that is after next_mail. If the current time is after deadline for
         *     next_mail, articles submitted before next_freeze are scheduled to
         *     be announced in this mailing.
         *
         *     Articles may be held and delayed due to moderation or technical
         *     reasons.
         */
        get: operations["times_times_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submission/{submission_id}/category_rejection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Category Rejection
         * @description Reject a single category from a submission.
         *
         *     If the submission is of type `new` or `rep`:
         *     - If the category being rejected is a primary, remove the category from the
         *     submission, put the submission on hold, and log the action to the admin
         *     log.
         *     - If the category is a secondary, remove it from the submission and log
         *     the action.
         *     - If the category is a primary as the action is "accept_secondary", update
         *     the category to become a secondary and log the action.
         *
         *     If submission is of type `cross`:
         *     - If the category being rejected is the only category in the set of new
         *     "cross" categories, set the submission status to REMOVED (9), log the
         *     action to the admin log and notify the
         *     submitter via email.
         *     - If the category is one of multiple categories in the set of new "cross"
         *     categories, remove the category from the submission
         *     and log the action to the admin log.
         *
         *     Returns "success" if the category_rejection completed successfully.
         */
        post: operations["category_rejection_submission__submission_id__category_rejection_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/fastly/purge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admin Fastly Purge
         * @description route will purge the fastly cache for all data from one paper
         */
        get: operations["admin_fastly_purge_admin_fastly_purge_post"];
        put?: never;
        /**
         * Admin Fastly Purge
         * @description route will purge the fastly cache for all data from one paper
         */
        post: operations["admin_fastly_purge_admin_fastly_purge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/queue/{queue_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Queue
         * @description Get all submissions for a type of admin queue.
         *
         *     `skip` must be greater than 0.
         *
         *     `limit` must be less than 200.
         *
         *     To query the full set make a request. If the size of the response
         *     is less than the value you passed for limit, then that was all the
         *     items. If not, then make another request with skip set to the
         *     previous limit.
         */
        get: operations["queue_admin_queue__queue_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Search */
        post: operations["admin_search_admin_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/search/autocomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Search Autocomplete */
        post: operations["admin_search_autocomplete_admin_search_autocomplete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/todo_queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Todo Queue */
        get: operations["todo_queue_admin_todo_queue_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Submission
         * @description Gets a single submission.
         */
        get: operations["submission_admin_submission__submission_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/admin_log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admin Log
         * @description Gets the admin log for a submission
         */
        get: operations["admin_log_admin_submission__submission_id__admin_log_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/allow_tex_produced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allow Tex Produced
         * @description If the user created a pdf using tex,
         *     we prefer them to upload the tex, not the pdf.
         */
        post: operations["allow_tex_produced_admin_submission__submission_id__allow_tex_produced_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/deny_tex_produced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deny Tex Produced */
        post: operations["deny_tex_produced_admin_submission__submission_id__deny_tex_produced_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Metadata Post
         * @description Changes the metadata of a submission.
         *
         *     Currently seeks feature parity with legacy metadata edit form except for
         *     ability to edit license. Admins do not want ability to edit license in new
         *     metadata editor.
         *
         *     Editable fields include categories, Title, Authors, Comments,
         *     Abstract, Proxy, Source Format, Source Flags, Is Withdrawn,
         *     Report Number, MSC_class, ACM_class, JournalRef, DOI.
         */
        post: operations["metadata_post_admin_submission__submission_id__metadata_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Comment Post
         * @description Adds an admin comment to a submission
         */
        post: operations["comment_post_admin_submission__submission_id__comment_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/is-user-deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admin Submission Is User Deleted
         * @description Test if the submission.status is in: 10,20,30
         *     If the user deleted their submission,
         *       there is no longer a path back to submitting it.
         *     Submissions that the user deletes,
         *       do not need to be be compared by arxiv-docsim, while
         *       moderator rejected submissions will have the text
         *       compared to future submissions.
         */
        get: operations["admin_submission_is_user_deleted_admin_submission__submission_id__is_user_deleted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/qa-metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admin Submission Qa Metadata
         * @description Test if the submission.status is in: 10,20,30
         *     If the user deleted their submission,
         *       there is no longer a path back to submitting it.
         *     Submissions that the user deletes,
         *       do not need to be be compared by arxiv-docsim, while
         *       moderator rejected submissions will have the text
         *       compared to future submissions.
         *
         *     Check whether admins or moderators have acted upon the submission.
         *       Do not include the student check, pg, qa, or admin sleeps.
         */
        get: operations["admin_submission_qa_metadata_admin_submission__submission_id__qa_metadata_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Submission Lock */
        post: operations["admin_submission_lock_admin_submission__submission_id__lock_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Submission Unlock */
        post: operations["admin_submission_unlock_admin_submission__submission_id__unlock_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/submission/{submission_id}/change_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Status
         * @description Changes the status on a submission.
         *
         *     Currently allows 1 hold, but in the future: N-holds.
         *     The admin_log maintains the history for viewing.
         *     Admins can overwrite any existing hold.
         *     This code shouldn't need to release existing hold first,
         *         just do it in one step, and log the change.
         */
        post: operations["change_status_admin_submission__submission_id__change_status_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/shared_nav_header": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Change Status
         * @description arxiv admin console and arxiv check use a shared set of nav links to make them feel more like one app
         *     return the structure and values for the links
         */
        get: operations["change_status_admin_shared_nav_header_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/show_mod_todo_list_vs_open_submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Debug Show Mod Todo List Vs Open Submissions */
        get: operations["get_debug_show_mod_todo_list_vs_open_submissions_debug_show_mod_todo_list_vs_open_submissions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/show_admin_todo_list_vs_open_submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Debug Show Mod Todo List Vs Open Submissions */
        get: operations["get_debug_show_mod_todo_list_vs_open_submissions_debug_show_admin_todo_list_vs_open_submissions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/show_submission_locks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Submission Locks */
        get: operations["get_submission_locks_debug_show_submission_locks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/stored_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Debug Stored Users */
        get: operations["get_debug_stored_users_debug_stored_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/clear_stored_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Debug Clear Stored User */
        get: operations["get_debug_clear_stored_user_debug_clear_stored_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug_log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Log
         * @description Gets the debugging log.
         */
        get: operations["debug_log_debug_log_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test_ctxvar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test Ctxvar */
        get: operations["test_ctxvar_test_ctxvar_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/moderators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Moderators */
        get: operations["moderators_moderators_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/sandbox-extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reports Sandbox Extended */
        get: operations["get_reports_sandbox_extended_reports_sandbox_extended_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category_taxonomy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Category Taxonomy
         * @description Gets the arXiv category taxonomy
         */
        get: operations["category_taxonomy_category_taxonomy_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AdminComment */
        AdminComment: {
            /**
             * Audience
             * @enum {string}
             */
            audience: "all" | "admin" | "qa";
            /** Logtext */
            logtext: string;
            program?: components["schemas"]["AdminLogProgram"] | null;
        };
        /**
         * AdminDiscussion
         * @description "Model for requests to put submission on hold with a comment.
         */
        AdminDiscussion: {
            /**
             * Type
             * @constant
             */
            type: "admin";
            /**
             * Reason
             * @constant
             */
            reason: "discussion";
        };
        /**
         * AdminLogProgram
         * @enum {string}
         */
        AdminLogProgram: "modapi.rest" | "qa.docsim";
        /** AdminSearchAutocompleteData */
        AdminSearchAutocompleteData: {
            /** Prefix */
            prefix?: string | null;
            /**
             * Flag Prefix Valid
             * @default false
             */
            flag_prefix_valid: boolean | null;
            /**
             * Flag Value Valid
             * @default false
             */
            flag_value_valid: boolean | null;
            /** Value */
            value?: string | null;
            /** Description */
            description?: string | null;
            /** Suggestions */
            suggestions?: components["schemas"]["AdminSearchAutocompleteSuggestion"][] | null;
        };
        /** AdminSearchAutocompleteResults */
        AdminSearchAutocompleteResults: {
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Data
             * @default []
             */
            data: components["schemas"]["AdminSearchAutocompleteData"][] | null;
        };
        /** AdminSearchAutocompleteSuggestion */
        AdminSearchAutocompleteSuggestion: {
            /** Prefix */
            prefix?: string | null;
            /** Description */
            description?: string | null;
            /** Updated Query */
            updated_query?: string | null;
        };
        /** AdminSearchResultDemographics */
        AdminSearchResultDemographics: {
            /** Affiliation */
            affiliation?: string;
            /** Archive */
            archive?: string;
            /** Country */
            country?: string;
            /** Flag Group Cs */
            flag_group_cs?: boolean;
            /** Flag Group Econ */
            flag_group_econ?: boolean;
            /** Flag Group Eess */
            flag_group_eess?: boolean;
            /** Flag Group Math */
            flag_group_math?: boolean;
            /** Flag Group Nlin */
            flag_group_nlin?: boolean;
            /** Flag Group Physics */
            flag_group_physics?: boolean;
            /** Flag Group Q Bio */
            flag_group_q_bio?: boolean;
            /** Flag Group Q Fin */
            flag_group_q_fin?: boolean;
            /** Flag Group Stat */
            flag_group_stat?: boolean;
            /** Flag Group Test */
            flag_group_test?: boolean;
            /** Flag Journal */
            flag_journal?: boolean;
            /** Flag Proxy */
            flag_proxy?: boolean;
            /** Flag Suspect */
            flag_suspect?: boolean;
            /** Flag Xml */
            flag_xml?: boolean;
            /** Subject Class */
            subject_class?: string;
            /** Url */
            url?: string;
            veto_status: components["schemas"]["VetoStatus"] | null;
        };
        /** AdminSearchResultUser */
        AdminSearchResultUser: {
            /** Email */
            email?: string;
            /** Email Bouncing */
            email_bouncing?: boolean;
            /** First Name */
            first_name?: string;
            /** Flag Allow Tex Produced */
            flag_allow_tex_produced?: boolean;
            /** Flag Banned */
            flag_banned?: boolean;
            /** Flag Can Lock */
            flag_can_lock?: boolean;
            /** Flag Edit System */
            flag_edit_system?: boolean;
            /** Flag Edit Users */
            flag_edit_users?: boolean;
            /** Flag Email Verified */
            flag_email_verified?: boolean;
            /**
             * Joined Date
             * Format: date-time
             */
            joined_date?: string;
            /** Joined Ip Num */
            joined_ip_num?: string | null;
            /** Initials */
            initials?: string;
            /** Last Name */
            last_name?: string;
            /** Name */
            name?: string;
            /** User Id */
            user_id?: number;
            /** Username */
            username?: string;
            demographics?: components["schemas"]["AdminSearchResultDemographics"] | null;
            /** Number Of Active */
            number_of_active?: number;
            /** Number Of Accepted */
            number_of_accepted?: number;
            /** Number Of Rejected */
            number_of_rejected?: number;
            /** Submitter Url */
            submitter_url?: string | null;
        };
        /** AdminSearchResults */
        AdminSearchResults: {
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Data
             * @default []
             */
            data: unknown[] | null;
            /** Submissions */
            submissions?: components["schemas"]["AdminSubmissionTodoWrapper"][] | null;
            /** Users */
            users?: components["schemas"]["AdminSearchResultUser"][] | null;
        };
        /**
         * AdminStatusChange
         * @enum {string}
         */
        AdminStatusChange: "lockforrelease" | "release" | "holdforqachecks" | "unsubmit" | "confirmunsubmit" | "remove" | "changequeue" | "requeue" | "requeuesubmitted" | "requeuenext";
        /**
         * AdminSubmission
         * @description Mixin to extend the `modapi.rest.schema.Submission` with additional
         *     properties needed by the admins
         */
        AdminSubmission: {
            /** Submission Id */
            submission_id: number;
            /** Doc Paper Id */
            doc_paper_id?: string | null;
            /** Created */
            created?: string | null;
            /** Updated */
            updated?: string | null;
            /** Submit Time */
            submit_time?: string | null;
            /** Release Time */
            release_time?: string | null;
            /** Status */
            status: string;
            /** Status Name */
            status_name?: string | null;
            /** Version */
            version?: number | null;
            /** Type */
            type?: string | null;
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** Comments */
            comments?: string | null;
            /** Is Author */
            is_author?: number | null;
            /** Sword Id */
            sword_id?: number | null;
            /** Proxy */
            proxy?: string | null;
            /** Contact Name */
            contact_name: string | null;
            /** Contact Email */
            contact_email: string | null;
            /** Report Num */
            report_num?: string | null;
            /** Msc Class */
            msc_class?: string | null;
            /** Acm Class */
            acm_class?: string | null;
            /** Journal Ref */
            journal_ref?: string | null;
            /** Doi */
            doi?: string | null;
            /** Is Ok */
            is_ok?: boolean | null;
            /** Admin Ok */
            admin_ok?: boolean | null;
            /** Auto Hold */
            auto_hold?: boolean | null;
            /** Is Locked */
            is_locked?: boolean | null;
            categories: components["schemas"]["Categories"];
            submitter: components["schemas"]["Submitter"];
            /** Comment Count */
            comment_count?: number | null;
            /** Matched */
            matched: string;
            hold_type?: components["schemas"]["HoldType"] | null;
            /** Hold Reason */
            hold_reason?: components["schemas"]["ModHoldReasons"] | components["schemas"]["SpecificRejectReasons"] | "reject-other" | "other" | null;
            urls?: components["schemas"]["SubmissionUrls"] | null;
            /** License */
            license?: string | null;
            source_format?: components["schemas"]["SourceFormat"] | null;
            /** Allow Tex Produced */
            allow_tex_produced?: boolean | null;
            submission_flags?: components["schemas"]["AdminSubmissionFlags"] | null;
            /** Edit Token */
            edit_token: string;
            /** Source Size */
            source_size?: number | null;
            /** Preflight */
            preflight?: boolean | null;
        };
        /** AdminSubmissionFlags */
        AdminSubmissionFlags: {
            /**
             * Admins
             * @default []
             */
            admins: components["schemas"]["modapi__rest__admin__domain__FlagUser"][] | null;
            /**
             * Students
             * @default []
             */
            students: components["schemas"]["modapi__rest__admin__domain__FlagUser"][] | null;
            /**
             * Primary Moderators
             * @default []
             */
            primary_moderators: components["schemas"]["modapi__rest__admin__domain__FlagUser"][] | null;
            /**
             * Other
             * @default []
             */
            other: components["schemas"]["modapi__rest__admin__domain__FlagUser"][] | null;
        };
        /**
         * AdminSubmissionTodoWrapper
         * @description A submission with a list of priority scores with explanations,
         *     and a reason for being included in the queue.
         */
        AdminSubmissionTodoWrapper: {
            /** Reasons */
            reasons?: string[] | null;
            /** Score */
            score?: number | null;
            /** Scores */
            scores?: (string | number)[][] | null;
            /** Submission Id */
            submission_id?: number | null;
            submission?: components["schemas"]["AdminSubmission"] | null;
            submission_flags?: components["schemas"]["AdminSubmissionFlags"] | null;
        };
        /** Categories */
        Categories: {
            /** Classifier Scores */
            classifier_scores: (components["schemas"]["ClassifierScore"] | components["schemas"]["ClassifierParseError"])[];
            submission: components["schemas"]["SubmissionClassification"];
            /** New Crosses */
            new_crosses: string[];
            proposals: components["schemas"]["Proposals"];
        };
        /** CategoryRejection */
        CategoryRejection: {
            /** Category */
            category: string;
            /**
             * Action
             * @enum {string}
             */
            action: "reject" | "accept_secondary";
        };
        /** CheckResponseForm */
        CheckResponseForm: {
            /** Ok */
            ok: boolean;
            /**
             * Persist Response
             * @default false
             */
            persist_response: boolean | null;
            /** Message */
            message?: string | null;
        };
        /** CheckResponseSummary */
        CheckResponseSummary: {
            /** Check Response Id */
            check_response_id: number;
            /** Ok */
            ok: boolean;
            /** Persist Response */
            persist_response: boolean;
        };
        /** CheckResultForm */
        CheckResultForm: {
            /** Ok */
            ok: boolean;
            /** Data Version */
            data_version?: number | null;
            /** Metadata Version */
            metadata_version?: number | null;
            /** Message */
            message?: string | null;
            /** Data */
            data?: string | null;
            /**
             * Allow Duplicates
             * @default false
             */
            allow_duplicates: boolean | null;
        };
        /** CheckResultSummary */
        CheckResultSummary: {
            /** Check Result Id */
            check_result_id: number;
            /** Ok */
            ok: boolean;
            /** Message */
            message?: string | null;
            /** Data */
            data?: string | null;
            /**
             * Data Version
             * @default 0
             */
            data_version: number;
            /**
             * Metadata Version
             * @default 0
             */
            metadata_version: number;
            /**
             * Responses
             * @default []
             */
            responses: components["schemas"]["CheckResponseSummary"][];
        };
        /**
         * CheckStatus
         * @description A fastapi response_model for loading the latest check_result.
         */
        CheckStatus: {
            /** Check Result Id */
            check_result_id: number;
            /** Check Id */
            check_id: number;
            /** Submission Id */
            submission_id: number;
            /**
             * Data Version
             * @default 0
             */
            data_version: number | null;
            /**
             * Metadata Version
             * @default 0
             */
            metadata_version: number | null;
            /** Ok */
            ok: boolean;
            /** Message */
            message?: string | null;
            /** Paper Id */
            paper_id?: string | null;
            /** Version */
            version?: number | null;
        };
        /** CheckStatusForm */
        CheckStatusForm: {
            /** Data Version */
            data_version?: number | null;
            /** Metadata Version */
            metadata_version?: number | null;
        };
        /** CheckSummary */
        CheckSummary: {
            /** Check Id */
            check_id: number;
            /** Check Name */
            check_name: string;
            latest_result?: components["schemas"]["CheckResultSummary"];
            outdated_result_with_response?: components["schemas"]["CheckResultSummary"];
        };
        /**
         * ClassifierParseError
         * @description Returned when the classifier cannot be deserialized.
         */
        ClassifierParseError: {
            /** Error */
            error: string;
        };
        /** ClassifierScore */
        ClassifierScore: {
            /** Score */
            score: number;
            /** Category */
            category: string;
        };
        /** Comment */
        Comment: {
            /**
             * Created
             * Format: date-time
             */
            created: string;
            /** Comment Id */
            comment_id: number;
            /** Logtext */
            logtext: string;
            user: components["schemas"]["CommentUser"];
            /** Program */
            program: string;
            /** Command */
            command: string;
        };
        /** CommentUser */
        CommentUser: {
            /** Is Admin */
            is_admin?: boolean | null;
            /** Is Moderator */
            is_moderator?: boolean | null;
            /** Name */
            name?: string | null;
            /** Email */
            email?: string | null;
            /** Username */
            username: string;
        };
        /** Flag */
        Flag: {
            flag: components["schemas"]["SubmissionFlagFlagNames"];
        };
        /** FlagOut */
        FlagOut: {
            /** Username */
            username: string;
            /** User Id */
            user_id: number;
            /**
             * Updated
             * Format: date-time
             */
            updated: string;
            /** Submission Id */
            submission_id: number;
            /** Flag Name */
            flag_name?: string | null;
            user?: components["schemas"]["modapi__rest__schema__FlagUser"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HoldReleaseStatus
         * @enum {string}
         */
        HoldReleaseStatus: "submitted" | "next";
        /**
         * HoldType
         * @description mod holds can be released by mods,
         *     admin hold can be released only by admins
         * @enum {string}
         */
        HoldType: "admin" | "mod";
        /**
         * Locked
         * @description "Is the submission edit locked or not
         */
        Locked: {
            /**
             * Is Locked
             * @constant
             */
            is_locked: true;
            /** Username */
            username: string;
        };
        /** Mod */
        Mod: {
            /** User Id */
            user_id: number;
            /** Username */
            username: string;
            /** Name */
            name: string;
            /** Email */
            email: string;
            /** Moderated Categories */
            moderated_categories: string[];
            /** Moderated Archives */
            moderated_archives?: string[] | null;
            moderator_prefs?: components["schemas"]["ModeratorPrefsGroups"] | null;
        };
        /** ModAdminLog */
        ModAdminLog: {
            /**
             * Created
             * Format: date-time
             */
            created: string;
            /** Comment Id */
            comment_id: number;
            /** Logtext */
            logtext: string;
            user?: components["schemas"]["ModAdminLogUser"] | null;
            /** Program */
            program: string;
            /** Command */
            command: string;
        };
        /** ModAdminLogForm */
        ModAdminLogForm: {
            /** Logtext */
            logtext: string;
        };
        /** ModAdminLogUser */
        ModAdminLogUser: {
            /** Email */
            email?: string | null;
            /** Initials */
            initials?: string | null;
            /** Is Admin */
            is_admin?: boolean | null;
            /** Is Moderator */
            is_moderator?: boolean | null;
            /** Name */
            name?: string | null;
            /** Username */
            username: string;
        };
        /**
         * ModHoldIn
         * @description Model for reqeusts for moderator holds.
         */
        ModHoldIn: {
            /**
             * Type
             * @constant
             */
            type: "mod";
            reason: components["schemas"]["ModHoldReasons"];
        };
        /**
         * ModHoldReasons
         * @description Reasons for mod holds
         * @enum {string}
         */
        ModHoldReasons: "discussion" | "moretime";
        /** ModeratorPrefs */
        ModeratorPrefs: {
            /** Daily Update */
            daily_update?: string[];
            /** Is Public */
            is_public?: string[];
            /** No Email */
            no_email?: string[];
            /** No Reply To */
            no_reply_to?: string[];
            /** No Web Email */
            no_web_email?: string[];
        };
        /** ModeratorPrefsGroups */
        ModeratorPrefsGroups: {
            categories?: components["schemas"]["ModeratorPrefs"];
            archives?: components["schemas"]["ModeratorPrefs"];
        };
        /**
         * NotLocked
         * @description The submission is not locked
         */
        NotLocked: {
            /**
             * Is Locked
             * @constant
             */
            is_locked: false;
        };
        /** Proposal */
        Proposal: {
            /** Response Comment Id */
            response_comment_id?: number | null;
            /** Is System Proposal */
            is_system_proposal: boolean;
            /** Proposal Comment Id */
            proposal_comment_id: number;
            /** Proposal Id */
            proposal_id: number;
            /** Category */
            category: string;
            /**
             * Type
             * @enum {string}
             */
            type: "primary" | "secondary";
            /**
             * Updated
             * Format: date-time
             */
            updated: string;
            /** Status */
            status: string;
        };
        /** Proposals */
        Proposals: {
            /** Resolved */
            resolved: components["schemas"]["Proposal"][];
            /** Unresolved */
            unresolved: components["schemas"]["Proposal"][];
        };
        /**
         * Reject
         * @description Model for requests to reject a submission with a reason from SpecificRejectReasons.
         */
        Reject: {
            /**
             * Type
             * @constant
             */
            type: "admin";
            reason: components["schemas"]["SpecificRejectReasons"];
        };
        /**
         * RejectOther
         * @description Model for requests to reject the submission for some other reason with a comment.
         */
        RejectOther: {
            /**
             * Type
             * @constant
             */
            type: "admin";
            /**
             * Reason
             * @constant
             */
            reason: "reject-other";
            /** Comment */
            comment: string;
        };
        /**
         * SendToAdminOther
         * @description "Model for requests to put submission on hold with a comment.
         */
        SendToAdminOther: {
            /**
             * Type
             * @constant
             */
            type: "admin";
            /**
             * Reason
             * @constant
             */
            reason: "other";
            /** Comment */
            comment: string;
            /** Sendback */
            sendback: boolean;
        };
        /** SharedNavLink */
        SharedNavLink: {
            /** Title */
            title: string;
            /** Url */
            url: string;
            /**
             * App
             * @enum {string}
             */
            app: "Check" | "AdminConsole" | "external";
        };
        /** SharedNavSection */
        SharedNavSection: {
            /** Title */
            title: string;
            /** Items */
            items: (components["schemas"]["SharedNavSubsection"] | components["schemas"]["SharedNavLink"])[];
        };
        /** SharedNavSubsection */
        SharedNavSubsection: {
            /** Title */
            title: string;
            /** Links */
            links: components["schemas"]["SharedNavLink"][];
        };
        /**
         * SourceFormat
         * @enum {string}
         */
        SourceFormat: "docx" | "html" | "invalid" | "pdf" | "pdftex" | "ps" | "tex" | "withdrawn";
        /**
         * SpecificRejectReasons
         * @description All the admin reasons except 'other'
         * @enum {string}
         */
        SpecificRejectReasons: "scope" | "softreject" | "hardreject" | "nonresearch" | "salami" | "qachecks";
        /** SubjectCategory */
        SubjectCategory: {
            /** Archive */
            archive: string;
            /** Subject Class */
            subject_class?: string | null;
        };
        /**
         * Submission
         * @description Submission model to transmit to client
         */
        Submission: {
            /** Submission Id */
            submission_id: number;
            /** Doc Paper Id */
            doc_paper_id?: string | null;
            /** Created */
            created?: string | null;
            /** Updated */
            updated?: string | null;
            /** Submit Time */
            submit_time?: string | null;
            /** Release Time */
            release_time?: string | null;
            /** Status */
            status: string;
            /** Status Name */
            status_name?: string | null;
            /** Version */
            version?: number | null;
            /** Type */
            type?: string | null;
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** Comments */
            comments?: string | null;
            /** Is Author */
            is_author?: number | null;
            /** Sword Id */
            sword_id?: number | null;
            /** Proxy */
            proxy?: string | null;
            /** Contact Name */
            contact_name: string | null;
            /** Contact Email */
            contact_email: string | null;
            /** Report Num */
            report_num?: string | null;
            /** Msc Class */
            msc_class?: string | null;
            /** Acm Class */
            acm_class?: string | null;
            /** Journal Ref */
            journal_ref?: string | null;
            /** Doi */
            doi?: string | null;
            /** Is Ok */
            is_ok?: boolean | null;
            /** Admin Ok */
            admin_ok?: boolean | null;
            /** Auto Hold */
            auto_hold?: boolean | null;
            /** Is Locked */
            is_locked?: boolean | null;
            categories: components["schemas"]["Categories"];
            submitter: components["schemas"]["Submitter"];
            /** Comment Count */
            comment_count?: number | null;
            /** Matched */
            matched: string;
            hold_type?: components["schemas"]["HoldType"] | null;
            /** Hold Reason */
            hold_reason?: components["schemas"]["ModHoldReasons"] | components["schemas"]["SpecificRejectReasons"] | "reject-other" | "other" | null;
            urls?: components["schemas"]["SubmissionUrls"] | null;
        };
        /**
         * SubmissionCheckSummary
         * @description A fastapi response_model for summarizing the list of qa checks,
         *     with the latest results and responses.
         */
        SubmissionCheckSummary: {
            /** Submission Id */
            submission_id: number;
            /**
             * Submission Data Version
             * @default 0
             */
            submission_data_version: number;
            /**
             * Submission Metadata Version
             * @default 0
             */
            submission_metadata_version: number;
            /**
             * Checks
             * @default []
             */
            checks: components["schemas"]["CheckSummary"][];
        };
        /** SubmissionClassification */
        SubmissionClassification: {
            /** Secondary */
            secondary: string[];
            /** Primary */
            primary?: string | null;
        };
        /** SubmissionFlagFieldsForm */
        SubmissionFlagFieldsForm: {
            /** Flag Done */
            flag_done?: boolean | null;
            /** Flag Viewed */
            flag_viewed?: boolean | null;
            /** Flag Pdf Opened */
            flag_pdf_opened?: boolean | null;
        };
        /**
         * SubmissionFlagFlagNames
         * @enum {string}
         */
        SubmissionFlagFlagNames: "checkmark" | "done";
        /** SubmissionFlagResult */
        SubmissionFlagResult: {
            /** Flag Done */
            flag_done: boolean;
            /** Flag Viewed */
            flag_viewed: boolean;
            /** Flag Pdf Opened */
            flag_pdf_opened: boolean;
            /** Flag Done Cleared */
            flag_done_cleared: boolean;
        };
        /** SubmissionFlagUser */
        SubmissionFlagUser: {
            /** Categories */
            categories?: string[] | null;
            /** Email */
            email?: string | null;
            /** Flag */
            flag?: string | null;
            /** Flag Name */
            flag_name?: string | null;
            /** Flag Done */
            flag_done?: boolean | null;
            /** Flag Done Cleared */
            flag_done_cleared?: boolean | null;
            /** Flag Pdf Opened */
            flag_pdf_opened?: boolean | null;
            /** Flag Viewed */
            flag_viewed?: boolean | null;
            /** Initials */
            initials?: string | null;
            /** Is Admin */
            is_admin?: boolean | null;
            /** Is Moderator */
            is_moderator?: boolean | null;
            /** Is Student */
            is_student?: boolean | null;
            /** Name */
            name?: string | null;
            /** User Id */
            user_id?: number | null;
            /** Username */
            username?: string | null;
        };
        /** SubmissionFlags */
        SubmissionFlags: {
            /**
             * Admins
             * @default []
             */
            admins: components["schemas"]["SubmissionFlagUser"][] | null;
            /**
             * Students
             * @default []
             */
            students: components["schemas"]["SubmissionFlagUser"][] | null;
            /**
             * Primary Moderators
             * @default []
             */
            primary_moderators: components["schemas"]["SubmissionFlagUser"][] | null;
            /**
             * Other
             * @default []
             */
            other: components["schemas"]["SubmissionFlagUser"][] | null;
        };
        /** SubmissionLockResult */
        SubmissionLockResult: {
            /**
             * Expires
             * Format: date-time
             */
            expires: string;
            /** Lock Type */
            lock_type: string;
            /** Released */
            released: number;
            /** Submission Id */
            submission_id: number;
            user?: components["schemas"]["SubmissionFlagUser"] | null;
            /** User Id */
            user_id: number;
        };
        /**
         * SubmissionLockType
         * @enum {string}
         */
        SubmissionLockType: "categories" | "metadata";
        /**
         * SubmissionMetadata
         * @description Basic metadata for a submission that can be edited
         */
        SubmissionMetadata: {
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string | null;
            /** Comments */
            comments?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** Proxy */
            proxy?: string | null;
            /** Report Num */
            report_num?: string | null;
            /** Msc Class */
            msc_class?: string | null;
            /** Acm Class */
            acm_class?: string | null;
            /** Journal Ref */
            journal_ref?: string | null;
            /** Doi */
            doi?: string | null;
            /** Primary */
            primary?: string | null;
            /** Secondary */
            secondary?: string[] | null;
            /** Edit Token */
            edit_token: string;
        };
        /** SubmissionTodoWrapper */
        SubmissionTodoWrapper: {
            /** Score */
            score?: number | null;
            /** Scores */
            scores?: (string | number)[][] | null;
            /** Submission Id */
            submission_id?: number | null;
            submission?: components["schemas"]["Submission"] | null;
            submission_flags?: components["schemas"]["SubmissionFlags"] | null;
        };
        /** SubmissionUrls */
        SubmissionUrls: {
            /** Abs */
            abs?: string | null;
            /** Addfiles */
            addfiles?: string | null;
            /** Allow Tex Produced */
            allow_tex_produced?: string | null;
            /** Eprint */
            eprint?: string | null;
            /** Format */
            format?: string | null;
            /** Html */
            html?: string | null;
            /** Html Announced */
            html_announced?: string | null;
            /** Html Submitted */
            html_submitted?: string | null;
            /** Html Submitted Future */
            html_submitted_future?: string | null;
            /** Log */
            log?: string | null;
            /** Paper Detail */
            paper_detail?: string | null;
            /** Pdf */
            pdf?: string | null;
            /** Pdf Announced */
            pdf_announced?: string | null;
            /** Pdf Submitted */
            pdf_submitted?: string | null;
            /** Remove */
            remove?: string | null;
            /** Reprocess */
            reprocess?: string | null;
            /** Resubmit */
            resubmit?: string | null;
            /** Src */
            src?: string | null;
            /** Submitter Detail */
            submitter_detail?: string | null;
            /** Unremove */
            unremove?: string | null;
            /** Unsubmit */
            unsubmit?: string | null;
            /** View */
            view?: string | null;
        };
        /** Submitter */
        Submitter: {
            /** User Id */
            user_id: number;
            /** Email */
            email: string;
            /** Name */
            name: string;
            /** Is Suspect */
            is_suspect: boolean;
            /** Submitter Url */
            submitter_url: string;
            stats?: components["schemas"]["SubmitterStats"] | null;
        };
        /** SubmitterStats */
        SubmitterStats: {
            /** Num Rejected */
            num_rejected: number;
            /** Num Owned */
            num_owned: number;
            /** Num Active */
            num_active: number;
            /** First Time Submitter */
            first_time_submitter: boolean;
        };
        /** Times */
        Times: {
            /**
             * Next Mail
             * Format: date-time
             */
            next_mail: string;
            /**
             * Next Freeze
             * Format: date-time
             */
            next_freeze: string;
            /**
             * Subsequent Mail
             * Format: date-time
             */
            subsequent_mail: string;
            /** Arxiv Tz */
            arxiv_tz: string;
        };
        /** UserOut */
        UserOut: {
            /** Username */
            username: string;
            /** Name */
            name: string;
            /** Can Lock */
            can_lock: boolean;
            /** Is Moderator */
            is_moderator: boolean;
            /** Is Admin */
            is_admin: boolean;
            /** Moderated Categories */
            moderated_categories: string[];
            /** Moderated Archives */
            moderated_archives: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VetoStatus
         * @enum {string}
         */
        VetoStatus: "ok" | "no-endorse" | "no-upload" | "no-replace";
        /** FlagUser */
        modapi__rest__admin__domain__FlagUser: {
            /** Categories */
            categories?: string[] | null;
            /** Email */
            email?: string | null;
            /** Flag */
            flag?: string | null;
            /** Flag Name */
            flag_name?: string | null;
            /** Flag Done */
            flag_done?: boolean | null;
            /** Flag Done Cleared */
            flag_done_cleared?: boolean | null;
            /** Flag Pdf Opened */
            flag_pdf_opened?: boolean | null;
            /** Flag Viewed */
            flag_viewed?: boolean | null;
            /** Initials */
            initials?: string | null;
            /** Is Admin */
            is_admin?: boolean | null;
            /** Is Moderator */
            is_moderator?: boolean | null;
            /** Is Student */
            is_student?: boolean | null;
            /** Name */
            name?: string | null;
            /** User Id */
            user_id?: number | null;
            /** Username */
            username?: string | null;
        };
        /** FlagUser */
        modapi__rest__schema__FlagUser: {
            /** Email */
            email: string;
            /** Moderators */
            moderators?: components["schemas"]["SubjectCategory"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    post_submissions_admin_log_submissions__submission_id__admin_log_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModAdminLogForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModAdminLog"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submissions_admin_logs_submissions__submission_id__admin_logs_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModAdminLog"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_submission_check_result_submissions__submission_id__checks__check_id__result_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                check_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckResultForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_submission_check_results_response_submissions__submission_id__checks__check_id__results__check_result_id__response_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                check_id: number;
                check_result_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckResponseForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_check_status_submissions__submission_id__checks__check_id__status_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                check_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CheckStatusForm"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_check_summary_submissions__submission_id__check_summary_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionCheckSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flag_submission__submission_id__flag_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_flag_submission__submission_id__flag_put: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Flag"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submissions_flags_submissions__submission_id__flags_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionFlags"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_submissions_flags_submissions__submission_id__flags_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmissionFlagFieldsForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionFlagResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    del_flag_submission__submission_id__flag_delete_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    flags_flags_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_submission__submission_id__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Submission"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submissions_submissions_get: {
        parameters: {
            query?: {
                include_auto_holds?: boolean;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Submission"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submissions_todo_submissions_todo_get: {
        parameters: {
            query?: {
                submission_id?: number | null;
                submission_ids?: string | null;
                include_auto_holds?: boolean;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionTodoWrapper"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submitter_submission__submission_id__submitter_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Submitter"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_debug_my_moderator_categories_debug_my_moderator_categories_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_pdf_submission__submission_id__pdf_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_submission_locks_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionLockResult"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_lookup_submission_locks__submission_id__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionLockResult"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_lookup_submission_locks__submission_id__lookup__lock_type__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                lock_type: components["schemas"]["SubmissionLockType"];
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionLockResult"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_lock_submission_locks__submission_id__lock__lock_type__get: {
        parameters: {
            query?: {
                override?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                lock_type: components["schemas"]["SubmissionLockType"];
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionLockResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_submission_locks_lock_submission_locks__submission_id__lock__lock_type__post: {
        parameters: {
            query?: {
                override?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                lock_type: components["schemas"]["SubmissionLockType"];
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionLockResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_lock_submission_locks__submission_id__release__lock_type__get: {
        parameters: {
            query?: {
                override?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                lock_type: components["schemas"]["SubmissionLockType"];
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_submission_locks_release_submission_locks__submission_id__release__lock_type__post: {
        parameters: {
            query?: {
                override?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
                lock_type: components["schemas"]["SubmissionLockType"];
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    is_locked_submission__submission_id__is_locked_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Locked"] | components["schemas"]["NotLocked"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    status_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    version_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    email_log_email_log_get: {
        parameters: {
            query: {
                lines: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    hold_submission__submission_id__hold_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModHoldIn"] | components["schemas"]["Reject"] | components["schemas"]["RejectOther"] | components["schemas"]["SendToAdminOther"] | components["schemas"]["AdminDiscussion"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    hold_release_submission__submission_id__hold_release_post: {
        parameters: {
            query?: {
                hold_release_status?: components["schemas"]["HoldReleaseStatus"] | null;
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_hold_holds__submission_id__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (string | number)[][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    holds_holds_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (string | number)[][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    me_me_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    times_times_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Times"];
                };
            };
        };
    };
    category_rejection_submission__submission_id__category_rejection_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRejection"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_fastly_purge_admin_fastly_purge_post: {
        parameters: {
            query: {
                paper_id: string;
                old_cats?: string | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_fastly_purge_admin_fastly_purge_post: {
        parameters: {
            query: {
                paper_id: string;
                old_cats?: string | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_admin_queue__queue_type__get: {
        parameters: {
            query?: {
                /** @description Filter hold queue by the type of hold. */
                hold_type?: ("admin" | "mod" | "legacy" | "auto") | null;
                skip?: number;
                limit?: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                queue_type: "submitted" | "hold" | "next" | "cross" | "ninja" | "stuck" | "processing" | "covid";
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminSubmission"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_search_admin_search_post: {
        parameters: {
            query?: {
                query?: string;
                skip?: number;
                limit?: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminSearchResults"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_search_autocomplete_admin_search_autocomplete_post: {
        parameters: {
            query?: {
                query?: string;
                skip?: number;
                limit?: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminSearchAutocompleteResults"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    todo_queue_admin_todo_queue_get: {
        parameters: {
            query?: {
                timeofday?: number | null;
                submission_ids?: string | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminSubmissionTodoWrapper"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submission_admin_submission__submission_id__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminSubmission"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_log_admin_submission__submission_id__admin_log_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    allow_tex_produced_admin_submission__submission_id__allow_tex_produced_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deny_tex_produced_admin_submission__submission_id__deny_tex_produced_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    metadata_post_admin_submission__submission_id__metadata_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmissionMetadata"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    comment_post_admin_submission__submission_id__comment_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminComment"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_submission_is_user_deleted_admin_submission__submission_id__is_user_deleted_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_submission_qa_metadata_admin_submission__submission_id__qa_metadata_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_submission_lock_admin_submission__submission_id__lock_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_submission_unlock_admin_submission__submission_id__unlock_post: {
        parameters: {
            query?: {
                enable_submission_locks?: boolean | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_status_admin_submission__submission_id__change_status_post: {
        parameters: {
            query: {
                status_change: components["schemas"]["AdminStatusChange"];
                enable_submission_locks?: boolean | null;
                notify?: number | null;
                comment?: string | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path: {
                submission_id: number;
            };
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_status_admin_shared_nav_header_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharedNavSection"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_debug_show_mod_todo_list_vs_open_submissions_debug_show_mod_todo_list_vs_open_submissions_get: {
        parameters: {
            query?: {
                only_absent?: number | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_debug_show_mod_todo_list_vs_open_submissions_debug_show_admin_todo_list_vs_open_submissions_get: {
        parameters: {
            query?: {
                only_absent?: number | null;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_submission_locks_debug_show_submission_locks_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_debug_stored_users_debug_stored_users_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_debug_clear_stored_user_debug_clear_stored_user_get: {
        parameters: {
            query: {
                clear_user_id: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    debug_log_debug_log_get: {
        parameters: {
            query?: {
                lines?: number;
            };
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_ctxvar_test_ctxvar_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    moderators_moderators_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Mod"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_reports_sandbox_extended_reports_sandbox_extended_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                modkey?: string | null;
            };
            path?: never;
            cookie?: {
                ARXIVNG_SESSION_ID?: string | null;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    category_taxonomy_category_taxonomy_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
